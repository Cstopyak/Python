(djangoPy3Env) colby@Colbys-MacBook-Pro UserShell % python manage.py shell
Python 3.8.6 (default, Oct  8 2020, 14:06:32) 
[Clang 12.0.0 (clang-1200.0.32.2)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from UserShellApp.models import *

Model_orm = Model_orm.objects.create(fname = "Mad", lname = "Max", email = "Mad.Max@gmail.com", age = 35)
Model_orm2 = Model_orm.objects.create(fname = "Jonny", lname = "Depp", email = "black.pearl@gmail.com", age = 45)
Model_orm3 = Model_orm.objects.create(fname = "Blair", lname = "Witch", email = "blair.Witch@gmail.com", age = 27)
Model_orm4 = Model_orm.objects.create(fname = "emily", lname = "Blunt", email = "Eblunt@gmail.com", age = 23)

QuerySet [<Model_orm: Model_orm object (1)>, <Model_orm: Model_orm object (2)>, <Model_orm: Model_orm object (3)>, <Model_orm: Model_orm object (4)>]>

>>> Model_orm.objects.last()
<Model_orm: Model_orm object (4)>
>>> 

<Model_orm: Model_orm object (1)>
>>> 

c = Model_orm.objects.get(id=3)
>>> c.lname= "pancakes"
>>> c.save()

c = Model_orm.objects.get(id=3)
>>> c.delete()
(1, {'UserShellApp.Model_orm': 1})
Model_orm.objects.all().order_by("-fname")
<QuerySet [<Model_orm: Model_orm object (2)>, <Model_orm: Model_orm object (1)>, <Model_orm: Model_orm object (4)>]>
QuerySet [<Model_orm: Model_orm object (4)>, <Model_orm: Model_orm object (1)>, <Model_orm: Model_orm object (2)>]>
>>> 
<!-- {{% for Model_orm in allModel_orm x%}}

{% endfor %} -->


class Node:
    def __init__(self, valueInput):
        self.value = valueInput
        self.next = None


class Queue:
    def __init__(self):
        self.head = None
        self.tail = None

    def enqueue(self, valueInput):
        #create a node (car) with that valueInput
        newNode = Node(valueInput)
        if self.head == None: #if nobody is at front of line, then line is empty
            self.head = newNode
            self.tail = newNode
        else:
            self.tail.next = newNode
            self.tail = newNode
        return self

    def dequeue(self):
        if self.head != None:
            self.head =self.head.next
        return self

    def front(self):
        if self.head != None:
            return self.head.value
        return None    
    def contains(self):
        pass

    def isempty(self):
        if self.head == None:
            return true
        return false

    def size(self):
        counter = 0
        if self.head != None:
        runner = self.head
        while runner != None:
            counter += 1

        

    def display(self):
        runner = self.head
        output = ""
        while runner != None:
            output += f"{runner.value} -->"
            runner = runner.next
        print(output)
        return self






chikfilaDT = Queue()
chikfilaDT.enqueue("Brad").enqueue("Charles").enqueue("Dawn").display().dequeue().front()